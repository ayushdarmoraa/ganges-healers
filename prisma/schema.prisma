// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum Role {
  USER
  HEALER
  ADMIN
}

enum BookingStatus {
  PENDING
  SCHEDULED
  CONFIRMED
  RESCHEDULED
  COMPLETED
  CANCELLED
}

model User {
  id                 String    @id @default(cuid())
  email              String    @unique
  name               String?
  image              String?
  phone              String?   @unique
  password           String? // For credentials login (null for OAuth users)
  role               Role      @default(USER)
  vip                Boolean   @default(false)
  freeSessionCredits Int       @default(0)
  emailVerified      DateTime?
  // next-auth
  accounts           Account[]
  sessions           Session[]
    // domain
  healer         Healer?
  bookings       Booking[] @relation("UserBookings")
  payments       Payment[]
  programEnrollments ProgramEnrollment[]
  memberships    VIPMembership[]
  sessionCredits SessionCredit[]
  communityAccess CommunityAccess[]
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
}

model Healer {
  id              String    @id @default(cuid())
  userId          String    @unique
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  bio             String?   @db.Text
  experienceYears Int       @default(0)
  rating          Float     @default(0)
  certifications  Json?     // Array of certification objects
  availability    Json?     // Weekly availability schedule
  specializations String[]  @default([])
  isActive        Boolean   @default(true)
  isVerified      Boolean   @default(false)
  bookings        Booking[]
  programEnrollments ProgramEnrollment[]
  
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}

enum ServiceMode {
  ONLINE
  OFFLINE
  BOTH
}

// --- Added enums for extended payment domain (additive, non-breaking) ---
enum PaymentType {
  SESSION
  PROGRAM
  MEMBERSHIP
  STORE
  COURSE
}

enum PaymentStatus {
  PENDING
  PROCESSING
  SUCCESS
  FAILED
  REFUNDED
}

// Program enrollments (added for PROGRAM payment flows)
enum ProgramEnrollmentStatus {
  pending_payment
  active
  completed
  paused
  cancelled
}

// --- Membership / Subscription Domain ---
enum MembershipInterval {
  MONTHLY
  YEARLY
}

enum MembershipStatus {
  pending
  active
  paused
  cancelled
  halted
}

model Service {
  id          String      @id @default(cuid())
  name        String
  slug        String      @unique
  description String      @db.Text
  tagline     String?
  category    String
  price       Float
  duration    Int         // in minutes
  image       String?
  mode        ServiceMode @default(BOTH)
  benefits    Json?       // Array of strings
  isActive    Boolean     @default(true)
  popularity  Int         @default(0)
  bookings    Booking[]
  
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model Booking {
  id          String        @id @default(cuid())
  userId      String
  user        User          @relation("UserBookings", fields: [userId], references: [id], onDelete: Cascade)
  healerId    String
  healer      Healer        @relation(fields: [healerId], references: [id], onDelete: Cascade)
  serviceId   String
  service     Service       @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  scheduledAt DateTime
  durationMin Int
  status      BookingStatus @default(PENDING)
  pricePaise  Int
  meetingLink String?
  payment     Payment?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  // Existing single-field indexes replaced with composite indexes for dashboard + listing queries
  @@index([userId, scheduledAt(sort: Desc)])
  @@index([healerId, scheduledAt, status])
  @@index([scheduledAt]) // retain for generic chronological queries
}

model Payment {
  id          String   @id @default(cuid())
  // Either bookingId (for session bookings) OR (userId + type) for generic payments
  bookingId   String?  @unique
  booking     Booking? @relation(fields: [bookingId], references: [id], onDelete: Cascade)
  userId      String?
  user        User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  gateway     String
  orderId     String?
  paymentId   String?
  status      String // pending|success|failed|refunded
  amountPaise Int
  createdAt   DateTime @default(now())
  // Partial unique index on paymentId (non-null) added via manual SQL migration for idempotency

  // --- additive extended commerce fields ---
  type             PaymentType?
  statusEnum       PaymentStatus?
  currency         String?        @default("INR")
  gatewayOrderId   String?        @unique
  gatewayPaymentId String?        @unique
  gatewaySignature String?
  metadata         Json?

  refunds          Refund[]
  invoice          Invoice?

  @@index([statusEnum])
  @@index([type])
  @@index([userId])
}

// New Refund model (additive) - supports partial or full gateway refunds
model Refund {
  id              String   @id @default(cuid())
  paymentId       String
  payment         Payment  @relation(fields: [paymentId], references: [id], onDelete: Cascade)
  amountPaise     Int
  reason          String?
  gatewayRefundId String?  @unique
  status          String?  // processed | failed | pending
  createdAt       DateTime @default(now())

  @@index([paymentId])
}

// Invoice model (additive) - one invoice per successful payment
model Invoice {
  id            String   @id @default(cuid())
  paymentId     String   @unique
  payment       Payment  @relation(fields: [paymentId], references: [id], onDelete: Cascade)
  invoiceNumber String   @unique
  issuedAt      DateTime @default(now())
  billTo        Json
  lineItems     Json
  subtotalPaise Int
  taxPaise      Int       @default(0)
  totalPaise    Int
  pdfUrl        String
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@index([paymentId])
}

// --- Program & Enrollment Models ---
model Program {
  id              String   @id @default(cuid())
  slug            String   @unique
  title           String
  description     String   @db.Text
  pricePaise      Int
  totalSessions   Int
  sessionsPerWeek Int
  durationMinutes Int
  isActive        Boolean  @default(true)
  enrollments     ProgramEnrollment[]
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@index([isActive])
}

model ProgramEnrollment {
  id         String                   @id @default(cuid())
  userId     String
  programId  String
  healerId   String?
  user       User                     @relation(fields: [userId], references: [id], onDelete: Cascade)
  program    Program                  @relation(fields: [programId], references: [id], onDelete: Cascade)
  healer     Healer?                  @relation(fields: [healerId], references: [id], onDelete: SetNull)
  status     ProgramEnrollmentStatus  @default(pending_payment)
  schedule   Json?
  progress   Json?
  startDate  DateTime?
  endDate    DateTime?
  createdAt  DateTime                 @default(now())
  updatedAt  DateTime                 @updatedAt

  @@index([userId, status])
  @@index([programId])
  @@index([healerId])
}

// VIP Membership Plans (Razorpay subscription plans mapping)
model MembershipPlan {
  id            String             @id @default(cuid())
  slug          String             @unique
  title         String
  pricePaise    Int
  interval      MembershipInterval
  razorpayPlanId String            @unique
  isActive      Boolean            @default(true)
  benefits      Json?
  memberships   VIPMembership[]
  createdAt     DateTime           @default(now())
  updatedAt     DateTime           @updatedAt

  @@index([isActive])
}

// User's active or historical VIP Membership subscription instances
model VIPMembership {
  id             String            @id @default(cuid())
  userId         String
  planId         String
  subscriptionId String            @unique
  status         MembershipStatus  @default(pending)
  startDate      DateTime?
  endDate        DateTime?
  nextBillingAt  DateTime?
  cancelledAt    DateTime?
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt
  user           User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  plan           MembershipPlan    @relation(fields: [planId], references: [id], onDelete: Cascade)
  sessionCredits SessionCredit[]

  @@index([userId, status])
  @@index([planId])
}

// Credits granted as membership benefits (track per membership activation)
model SessionCredit {
  id            String        @id @default(cuid())
  userId        String
  membershipId  String?       // nullable to allow other sources later
  credits       Int
  expiresAt     DateTime?
  source        String
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  user          User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  membership    VIPMembership? @relation(fields: [membershipId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([membershipId])
}

// Optional: community access gating for VIP
model CommunityAccess {
  id         String   @id @default(cuid())
  userId     String
  level      String
  grantedAt  DateTime @default(now())
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, level])
}

// NextAuth tables (Prisma Adapter)
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
